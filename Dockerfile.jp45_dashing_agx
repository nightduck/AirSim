#
# this dockerfile roughly follows the 'Install ROS2 Via Debian Packages' from:
#   https://index.ros.org/doc/ros2/Installation/Eloquent/Linux-Install-Debians/
#
ARG BASE_IMAGE=nvcr.io/nvidia/l4t-base:r32.5.0
FROM ${BASE_IMAGE}

ARG ROS_PKG=ros_base
ENV ROS_DISTRO=dashing
ENV ROS_ROOT=/opt/ros/${ROS_DISTRO}

ENV DEBIAN_FRONTEND=noninteractive

WORKDIR /workspace

# change the locale from POSIX to UTF-8
RUN apt-get update && \
    apt-get install -y locales && \
    locale-gen en_US en_US.UTF-8 && update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 && \
    rm -rf /var/lib/apt/lists/*
ENV LANG=en_US.UTF-8

# Install some utilities
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        git \
        build-essential \
		curl \
		wget \
		gnupg2 \
		lsb-release \
        vim \
        gdb \
        libssl-dev \
        python3 \
        python3-numpy \
        ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Install CMake 3.18
RUN git clone -b v3.18.6 https://github.com/Kitware/CMake.git /usr/local/src/CMake \
        && cd /usr/local/src/CMake && bash bootstrap && \
        make -j $(nproc) && make install && \
        rm -r /usr/local/src/CMake

# Install OpenCV 4.1.1
RUN git clone -b 4.1.1 https://github.com/opencv/opencv /usr/local/src/opencv && \
    git clone -b 4.1.1 https://github.com/opencv/opencv_contrib /usr/local/src/opencv_contrib && \
    cd /usr/local/src/opencv && mkdir build && cd build && \
    cmake -D CMAKE_BUILD_TYPE=RELEASE \
	    -D CMAKE_C_COMPILER=/usr/bin/gcc-7 \
        -D CMAKE_INSTALL_PREFIX=/usr/local \
        -D INSTALL_PYTHON_EXAMPLES=ON \
        -D INSTALL_C_EXAMPLES=OFF \
        -D WITH_TBB=ON \
        -D WITH_CUDA=OFF \
        -D BUILD_opencv_cudacodec=OFF \
        -D ENABLE_FAST_MATH=1 \
        -D CUDA_FAST_MATH=1 \
        -D WITH_CUBLAS=1 \
        -D WITH_V4L=ON \
        -D WITH_QT=OFF \
        -D WITH_OPENGL=ON \
        -D WITH_GSTREAMER=ON \
        -D OPENCV_GENERATE_PKGCONFIG=ON \
        -D OPENCV_PC_FILE_NAME=opencv.pc \
        -D OPENCV_ENABLE_NONFREE=ON \
        -D OPENCV_PYTHON3_INSTALL_PATH=~/.virtualenvs/cv/lib/python3.6/site-packages \
        -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules \
        -D PYTHON_EXECUTABLE=~/.virtualenvs/cv/bin/python3 \
        -D BUILD_EXAMPLES=ON \
        -DENABLE_PRECOMPILED_HEADERS=OFF .. && \
    make -j $(nproc) && \
    make install && \
    /bin/bash -c 'echo "/usr/local/lib" >> /etc/ld.so.conf.d/opencv.conf' && \
    ldconfig && \
    rm -r /usr/local/src/opencv /usr/local/src/opencv_contrib

# add the ROS deb repo to the apt sources list
RUN wget --no-check-certificate https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc && apt-key add ros.asc && rm ros.asc \
    && sh -c 'echo "deb [arch=$(dpkg --print-architecture)] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" > /etc/apt/sources.list.d/ros2-latest.list'

# install ROS packages
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
		ros-dashing-desktop \
		ros-dashing-vision-msgs \
        ros-dashing-tf2-sensor-msgs \
        ros-dashing-launch-testing-ament-cmake \
        gcc-8 g++-8 \
        libprotobuf-dev protobuf-compiler \
        libyaml-cpp-dev \
		libpython3-dev \
		python3-colcon-common-extensions \
		python3-rosdep \
    && rm -rf /var/lib/apt/lists/*

# init/update rosdep
RUN apt-get update && \
    cd ${ROS_ROOT} && \
    rosdep init && \
    rosdep update && \
    rm -rf /var/lib/apt/lists/*

# Replace default eigen with 3.3.7 (PCL wants it to be at this location, and refuses to check /usr/local/include/eigen3, idfk)
RUN rm -r /usr/include/eigen3 \
        && git clone -b 3.3.7 https://gitlab.com/libeigen/eigen.git /usr/include/eigen3

# opy the ros2/install directory from an already built repo
RUN mkdir -p /workspace/AirSim/ros2
COPY ros2/install /workspace/AirSim/ros2/

# Download tensorrt engines
RUN wget https://cloud.orenbell.com/index.php/s/Gy5mogdYq7PgYGM/download -O /workspace/deer_hde_fp32.rt \
    && wget https://cloud.orenbell.com/index.php/s/AFiLTrgPiQ6dxt6/download -O /workspace/yolo4_deer_fp32.rt

# setup entrypoint
COPY ./ros_entrypoint.sh /
ENTRYPOINT ["/ros_entrypoint.sh"]
CMD ["",""]